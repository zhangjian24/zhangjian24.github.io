<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jian</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.zhangjian.ml/"/>
  <updated>2018-09-22T19:14:21.450Z</updated>
  <id>http://blog.zhangjian.ml/</id>
  
  <author>
    <name>jian zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jmockit</title>
    <link href="http://blog.zhangjian.ml/2018/09/16/jmockit/"/>
    <id>http://blog.zhangjian.ml/2018/09/16/jmockit/</id>
    <published>2018-09-16T09:08:49.000Z</published>
    <updated>2018-09-22T19:14:21.450Z</updated>
    
    <content type="html"><![CDATA[<p>   之前试过powermock，虽然可以mock 静态方法，但是得依赖maven 插件，而后找到了<code>jmockit</code>，配置非常简洁、性能高。<br>   <a href="http://jmockit.cn/showChannel.htm?channel=2" target="_blank" rel="noopener">中文文档</a></p><h1 id="脚本录制规范"><a href="#脚本录制规范" class="headerlink" title="脚本录制规范"></a>脚本录制规范</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Expectations() &#123;</span><br><span class="line">    <span class="comment">// 这是一个Expectations匿名内部类</span></span><br><span class="line">    &#123;</span><br><span class="line">          <span class="comment">// 这是这个内部类的初始化代码块，我们在这里写录制脚本，脚本的格式要遵循下面的约定</span></span><br><span class="line">        <span class="comment">//方法调用(可是类的静态方法调用，也可以是对象的非静态方法调用)</span></span><br><span class="line">        <span class="comment">//result赋值要紧跟在方法调用后面</span></span><br><span class="line">        <span class="comment">//...其它准备录制脚本的代码</span></span><br><span class="line">        <span class="comment">//方法调用</span></span><br><span class="line">        <span class="comment">//result赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">还可以再写<span class="keyword">new</span>一个Expectations，只要出现在重放阶段之前均有效。</span><br><span class="line"><span class="keyword">new</span> Expectations() &#123;</span><br><span class="line">      </span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//...录制脚本</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="mock整个类"><a href="#mock整个类" class="headerlink" title="mock整个类"></a>mock整个类</h1><p><code>@Injectabe</code>: 只mock<code>jmockit</code>初始化的实例；<br><code>@Mocked</code>: mock标注类的所有实例，包括手动实例化；<br><code>@Capturing</code>: 影响接口所有子类的实现，包括动态代理；</p><p>示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Expectations对外部类的mock对象进行录制</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpectationsTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Mocked</span></span><br><span class="line">    Calendar cal;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRecordOutside</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Expectations() &#123;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 对cal.get方法进行录制，并匹配参数 Calendar.YEAR</span></span><br><span class="line">                cal.get(Calendar.YEAR);</span><br><span class="line">                result = <span class="number">2016</span>;<span class="comment">// 年份不再返回当前小时。而是返回2016年</span></span><br><span class="line">                <span class="comment">// 对cal.get方法进行录制，并匹配参数 Calendar.HOUR_OF_DAY</span></span><br><span class="line">                cal.get(Calendar.HOUR_OF_DAY);</span><br><span class="line">                result = <span class="number">7</span>;<span class="comment">// 小时不再返回当前小时。而是返回早上7点钟</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Assert.assertTrue(cal.get(Calendar.YEAR) == <span class="number">2016</span>);</span><br><span class="line">        Assert.assertTrue(cal.get(Calendar.HOUR_OF_DAY) == <span class="number">7</span>);</span><br><span class="line">        <span class="comment">// 因为没有录制过，所以这里月份返回默认值 0</span></span><br><span class="line">        Assert.assertTrue(cal.get(Calendar.DAY_OF_MONTH) == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="对类部分mock"><a href="#对类部分mock" class="headerlink" title="对类部分mock"></a>对类部分mock</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过Expectations对其构造函数mock对象进行录制</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpectationsConstructorTest2</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 把类传入Expectations的构造函数</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRecordConstrutctor1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        <span class="comment">// 把待Mock的类传入Expectations的构造函数，可以达到只mock类的部分行为的目的</span></span><br><span class="line">        <span class="keyword">new</span> Expectations(Calendar.class) &#123;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 只对get方法并且参数为Calendar.HOUR_OF_DAY进行录制</span></span><br><span class="line">                cal.get(Calendar.HOUR_OF_DAY);</span><br><span class="line">                result = <span class="number">7</span>;<span class="comment">// 小时永远返回早上7点钟</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Calendar now = Calendar.getInstance();</span><br><span class="line">        <span class="comment">// 因为下面的调用mock过了，小时永远返回7点钟了</span></span><br><span class="line">        Assert.assertTrue(now.get(Calendar.HOUR_OF_DAY) == <span class="number">7</span>);</span><br><span class="line">        <span class="comment">// 因为下面的调用没有mock过，所以方法的行为不受mock影响，</span></span><br><span class="line">        Assert.assertTrue(now.get(Calendar.DAY_OF_MONTH) == (<span class="keyword">new</span> Date()).getDate());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 把对象传入Expectations的构造函数</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRecordConstrutctor2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Calendar cal = Calendar.getInstance();</span><br><span class="line">        <span class="comment">// 把待Mock的对象传入Expectations的构造函数，可以达到只mock类的部分行为的目的，但只对这个对象影响</span></span><br><span class="line">        <span class="keyword">new</span> Expectations(cal) &#123;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 只对get方法并且参数为Calendar.HOUR_OF_DAY进行录制</span></span><br><span class="line">                cal.get(Calendar.HOUR_OF_DAY);</span><br><span class="line">                result = <span class="number">7</span>;<span class="comment">// 小时永远返回早上7点钟</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 因为下面的调用mock过了，小时永远返回7点钟了</span></span><br><span class="line">        Assert.assertTrue(cal.get(Calendar.HOUR_OF_DAY) == <span class="number">7</span>);</span><br><span class="line">        <span class="comment">// 因为下面的调用没有mock过，所以方法的行为不受mock影响，</span></span><br><span class="line">        Assert.assertTrue(cal.get(Calendar.DAY_OF_MONTH) == (<span class="keyword">new</span> Date()).getDate());</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// now是另一个对象，上面录制只对cal对象的影响，所以now的方法行为没有任何变化</span></span><br><span class="line">        Calendar now = Calendar.getInstance();</span><br><span class="line">        <span class="comment">// 不受mock影响</span></span><br><span class="line">        Assert.assertTrue(now.get(Calendar.HOUR_OF_DAY) == (<span class="keyword">new</span> Date()).getHours());</span><br><span class="line">        <span class="comment">// 不受mock影响</span></span><br><span class="line">        Assert.assertTrue(now.get(Calendar.DAY_OF_MONTH) == (<span class="keyword">new</span> Date()).getDate());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Verifications() &#123;</span><br><span class="line">    <span class="comment">// 这是一个Verifications匿名内部类</span></span><br><span class="line">    &#123;</span><br><span class="line">          <span class="comment">// 这是这个内部类的初始化代码块，我们在这里写验证脚本，脚本的格式要遵循下面的约定</span></span><br><span class="line">        <span class="comment">//方法调用(可是类的静态方法调用，也可以是对象的非静态方法调用)</span></span><br><span class="line">        <span class="comment">//times/minTimes/maxTime 表示调用次数的限定要求。赋值要紧跟在方法调用后面，也可以不写（表示只要调用过就行，不限次数）</span></span><br><span class="line">        <span class="comment">//...其它准备验证脚本的代码</span></span><br><span class="line">        <span class="comment">//方法调用</span></span><br><span class="line">        <span class="comment">//times/minTimes/maxTime赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">  </span><br><span class="line">还可以再写<span class="keyword">new</span>一个Verifications，只要出现在重放阶段之后均有效。</span><br><span class="line"><span class="keyword">new</span> Verifications() &#123;</span><br><span class="line">       </span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//...录制脚本</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;   之前试过powermock，虽然可以mock 静态方法，但是得依赖maven 插件，而后找到了&lt;code&gt;jmockit&lt;/code&gt;，配置非常简洁、性能高。&lt;br&gt;   &lt;a href=&quot;http://jmockit.cn/showChannel.htm?chann
      
    
    </summary>
    
      <category term="技术" scheme="http://blog.zhangjian.ml/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="后端" scheme="http://blog.zhangjian.ml/categories/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="mock" scheme="http://blog.zhangjian.ml/tags/mock/"/>
    
  </entry>
  
  <entry>
    <title>powermock</title>
    <link href="http://blog.zhangjian.ml/2018/09/16/powermock/"/>
    <id>http://blog.zhangjian.ml/2018/09/16/powermock/</id>
    <published>2018-09-16T08:51:53.000Z</published>
    <updated>2018-09-22T19:14:21.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><p>首先mockito框架，可以mock,也可以spy,但是不能mock静态方法，和私有方法，<br>然而powermock支持;<br><a href="https://github.com/hehonghui/mockito-doc-zh/blob/master/mr.simple.md" target="_blank" rel="noopener">mockito中文文档</a></p><h1 id="maven-依赖"><a href="#maven-依赖" class="headerlink" title="maven 依赖"></a>maven 依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">powermock.version</span>&gt;</span>1.7.1<span class="tag">&lt;/<span class="name">powermock.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mockito1.version</span>&gt;</span>1.10.19<span class="tag">&lt;/<span class="name">mockito1.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mockito<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mockito-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mockito1.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.powermock<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>powermock-module-junit4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;powermock.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.powermock<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>powermock-api-mockito<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;powermock.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.powermock<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>powermock-module-junit4-rule-agent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;powermock.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 插件配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">argLine</span>&gt;</span>-javaagent:$&#123;settings.localRepository&#125;/org/powermock/powermock-module-javaagent/1.7.1/powermock-module-javaagent-1.7.1.jar -XX:-UseSplitVerifier<span class="tag">&lt;/<span class="name">argLine</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebAppConfiguration</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations = &#123;<span class="string">"classpath:spring-application.xml"</span>&#125;)</span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@PrepareForTest</span>(HttpPayUtil.class)<span class="comment">//准备静态类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> PowerMockRule rule = <span class="keyword">new</span> PowerMockRule();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext webApplicationContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        PropertyConfigurator.configure(<span class="keyword">new</span> FileInputStream(ResourceUtils.getFile(ResourceUtils.CLASSPATH_URL_PREFIX+<span class="string">"log4j.properties"</span>)));</span><br><span class="line">        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//mock静态类</span></span><br><span class="line">        PowerMockito.mockStatic(HttpPayUtil.class);</span><br><span class="line">        <span class="comment">//录制脚本</span></span><br><span class="line">        PowerMockito.when(HttpPayUtil.queryOrderDetail(<span class="string">"1"</span>, PayConstants.PaySource.WEAPP))</span><br><span class="line">        .thenReturn(<span class="keyword">new</span> String[]&#123;<span class="string">"2"</span>,<span class="string">"3"</span>&#125;);</span><br><span class="line"></span><br><span class="line">        String[] stss = HttpPayUtil.queryOrderDetail(<span class="string">"1"</span>, PayConstants.PaySource.WEAPP);</span><br><span class="line">        System.out.println(stss[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(stss[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn test</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h1&gt;&lt;p&gt;首先mockito框架，可以mock,也可以spy,但是不能mock静态方法，和私有方法，&lt;br&gt;然而powermock支持;&lt;br&gt;&lt;a 
      
    
    </summary>
    
      <category term="技术" scheme="http://blog.zhangjian.ml/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="后端" scheme="http://blog.zhangjian.ml/categories/%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="mock" scheme="http://blog.zhangjian.ml/tags/mock/"/>
    
  </entry>
  
  <entry>
    <title>vue-阿里云上传组件</title>
    <link href="http://blog.zhangjian.ml/2018/09/16/vue-%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%8A%E4%BC%A0%E7%BB%84%E4%BB%B6/"/>
    <id>http://blog.zhangjian.ml/2018/09/16/vue-阿里云上传组件/</id>
    <published>2018-09-16T08:45:00.000Z</published>
    <updated>2018-09-22T19:14:21.450Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">vue中文文档</a></li><li><a href="http://element.eleme.io/#/" target="_blank" rel="noopener">elementui文档</a></li><li><p><a href="https://github.com/ElemeFE/element" target="_blank" rel="noopener">elementui源码</a></p></li><li><p>复用<code>elementUI</code>的<code>el-upload</code>，并覆盖<code>http-request</code>方法，实现自定义的上传行为；</p></li><li>通过<code>computed</code>的属性带入初始链接；</li><li>通过<code>prop.sync</code>/<code>update:prop</code>，回传链接；</li><li><p>用html的<code>audio</code>标签自动获取音频时长;</p><img src="/2018/09/16/vue-阿里云上传组件/vue-code.png" title="vue-code"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://cn.vuejs.org/v2/guide/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue中文文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://element.eleme.io/#/&quot; t
      
    
    </summary>
    
      <category term="技术" scheme="http://blog.zhangjian.ml/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="http://blog.zhangjian.ml/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue" scheme="http://blog.zhangjian.ml/tags/vue/"/>
    
      <category term="组件" scheme="http://blog.zhangjian.ml/tags/%E7%BB%84%E4%BB%B6/"/>
    
      <category term="上传" scheme="http://blog.zhangjian.ml/tags/%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>vim高级功能</title>
    <link href="http://blog.zhangjian.ml/2018/09/16/vim%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD/"/>
    <id>http://blog.zhangjian.ml/2018/09/16/vim高级功能/</id>
    <published>2018-09-16T08:34:53.000Z</published>
    <updated>2018-09-22T19:14:21.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多文件编辑"><a href="#多文件编辑" class="headerlink" title="多文件编辑"></a>多文件编辑</h1><blockquote><p>vim 1.txt 2.txt</p></blockquote><ul><li>在vim命令后面跟<code>多个文件名</code>，即可同时编辑多个文件</li><li><code>命令模式</code>下，<code>:n</code>，切换到下一个文件</li><li><code>命令模式</code>下，<code>:N</code>，编辑上一个文件</li><li><code>:n!</code>/<code>:N</code>，丢弃未保存的内容，强制切换</li><li><code>命令模式</code>下，<code>:e 3.txt</code>，编辑新文件“3.txt”</li><li><code>命令模式</code>下，<code>:e#</code>，回到上一次编辑的文件</li><li><code>命令模式</code>下，<code>:ls</code>，列出同时编辑的多个文件项目列表</li><li><code>命令模式</code>下，<code>:b 2.txt</code>（文件名）/<code>:b 2</code>（编辑列表中的文件项目编号），可直接切换到指定的文件</li><li><code>命令模式</code>下，<code>:bd 2.txt</code>（文件名）/<code>:bd 2</code>（编辑列表中的文件项目编号），将文件项目从编辑列表中删除</li><li><code>命令模式</code>下，<code>:e!  4.txt</code>，放弃未保存的内容，强制打开文件</li><li><code>命令模式</code>下，<code>:f</code>，显示正在编辑的文件名</li><li><code>命令模式</code>下，<code>:f new.txt</code>，重命名当前编辑的文件名为“new.txt”</li></ul><h1 id="可视模式-选择模式"><a href="#可视模式-选择模式" class="headerlink" title="可视模式/选择模式"></a>可视模式/选择模式</h1><ul><li><code>普通模式</code>下，<code>9G</code>（大写），跳转到第9行</li><li><code>普通模式</code>下，<code>v</code>（小写），进入<code>字符选择模式</code>，然后利用光标移动键移动光标，光标走过的字符被选中，再次<code>v</code>（小写）取消选择</li><li><code>普通模式</code>下，<code>V</code>（大写），进入<code>行选择模式</code>，可以上下移动光标选择更多行，再次<code>V</code>（大写）取消选择</li><li><code>普通模式</code>下，<code>ctrl+v</code>（小写），进入<code>区域选择模式</code>，再次<code>ctrl+v</code>（小写）取消选择</li><li>在<code>选择模式</code>（字符/行/区域）下，<code>d</code>删除选取内容，<code>y</code>复制选取内容，<code>&gt;</code>选中内容缩进</li></ul><h1 id="窗口命令-ctrl-w"><a href="#窗口命令-ctrl-w" class="headerlink" title="窗口命令(ctrl+w)"></a>窗口命令(ctrl+w)</h1><p><code>命令模式</code>下，<code>:sp 1.txt</code>，横向打开视窗编辑1.txt文件</p><p><code>命令模式</code>下，<code>:vsp 1.txt</code>，纵向打开视窗编辑1.txt文件</p><p><code>普通模式</code>下，<code>ctrl+w &lt;以下命令&gt;</code>：</p><ul><li><code>s</code>，水平分割窗口</li><li><code>v</code>，垂直分割窗口</li><li><code>q</code>，结束分割出来的新窗口，有未保存的内容则需要，<code>q!</code></li><li><code>j</code>、<code>k</code>、<code>h</code>、<code>l</code>，移动到上下左右窗口</li><li>大写jkhl，将窗口移动到上下左右</li><li><code>-</code>、<code>+</code>，减小/增加视窗的的高度</li></ul><h1 id="外部命令"><a href="#外部命令" class="headerlink" title="外部命令"></a>外部命令</h1><p><code>命令模式</code>下，<code>!</code>可执行外部shell命令，如<code>:!ls</code>显示当前目录的内容</p><h1 id="多行编辑"><a href="#多行编辑" class="headerlink" title="多行编辑"></a>多行编辑</h1><p><code>ctrl +v</code> 选取多行，<code>shift+i</code>进行插入，然后两次<code>esc</code> 退出</p><h1 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h1><ul><li>单行复制<br>在命令模式下，将光标移动到将要复制的行处，按“yy”进行复制；</li><li>多行复制<br>在命令模式下，将光标移动到将要复制的首行处，按“nyy”复制n行；其中n为1、2，</li></ul><h1 id="粘贴"><a href="#粘贴" class="headerlink" title="粘贴"></a>粘贴</h1><p>在命令模式下，将光标移动到将要粘贴的行处，按“p”进行粘贴</p><h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><p><code>x</code> : 删除光标后一个字符<br><code>dd</code> : 删除光标所在行,n dd 删除指定的行数</p><h1 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h1><p><code>u</code> : 一步一步撤销<br><code>Ctr-r</code> : 反撤销</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;多文件编辑&quot;&gt;&lt;a href=&quot;#多文件编辑&quot; class=&quot;headerlink&quot; title=&quot;多文件编辑&quot;&gt;&lt;/a&gt;多文件编辑&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;vim 1.txt 2.txt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在v
      
    
    </summary>
    
      <category term="工具" scheme="http://blog.zhangjian.ml/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="文本编辑" scheme="http://blog.zhangjian.ml/categories/%E5%B7%A5%E5%85%B7/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91/"/>
    
    
      <category term="vim" scheme="http://blog.zhangjian.ml/tags/vim/"/>
    
      <category term="编辑器" scheme="http://blog.zhangjian.ml/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>CC助手-超越剪贴板</title>
    <link href="http://blog.zhangjian.ml/2018/09/16/CC%E5%8A%A9%E6%89%8B-%E8%B6%85%E8%B6%8A%E5%89%AA%E8%B4%B4%E6%9D%BF/"/>
    <id>http://blog.zhangjian.ml/2018/09/16/CC助手-超越剪贴板/</id>
    <published>2018-09-16T08:00:26.000Z</published>
    <updated>2018-09-22T19:14:21.450Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/659256-3389618a5437a0ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="随时收藏-两次-CTRL-C"><a href="#随时收藏-两次-CTRL-C" class="headerlink" title="随时收藏-两次^CTRL+C"></a>随时收藏-两次<code>^CTRL+C</code></h1><p><img src="https://upload-images.jianshu.io/upload_images/659256-548e1d28ec99c835.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>对比</strong>：<br>| 没有cc助手                                                   | cc助手               |<br>| ———————————————————— | ——————– |<br>| 1.选中文字，<code>^Ctrl-C</code>进行复制；<br>2.找到笔记程序并打开；<br>3.新建一篇笔记；<br>4.<code>^Ctrl-V</code> 粘贴内容；<br>5.切换回网页继续阅读。OK，刚才看到哪了？ | <code>^Ctrl-C</code>再<code>^Ctrl-C</code> |</p><hr><h1 id="Anything-Anywhere"><a href="#Anything-Anywhere" class="headerlink" title="Anything, Anywhere"></a>Anything, Anywhere</h1><label style="color:green"> <em>只要能复制的地方，就可以收藏</em> </label><h1 id="插件系统"><a href="#插件系统" class="headerlink" title="插件系统"></a>插件系统</h1><ul><li>OCR</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/659256-50535abf6e8887be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文字识别"></p><ul><li>单词翻译</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/659256-cedbd34b87bf9933.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="单词翻译"></p><ul><li>开放的插件系统<blockquote><p>支持 JavaScript 编写插件，海量的开源资源任你发挥<br>（插件体系尚在完善中，正式发布时会开放）</p></blockquote></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/659256-6e6f2bc0d58dd510.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="插件"></p><h1 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h1><ul><li><code>^Ctrl-Alt-C</code>快捷键，激活列表页</li><li><code>Tab</code> 以及左右箭头，切换 tab</li><li>上下箭头切换焦点</li><li>任意字符输入进入搜索状态， / 筛选不同类型（文字、图片），# 筛选分类</li><li>Esc取消搜索或者隐藏界面</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/659256-08f8beff31a8e91d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="列表页"></p><hr><p>CC助手下载地址：<a href="https://ccyixia.com" target="_blank" rel="noopener">https://ccyixia.com</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/659256-3389618a5437a0ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; 
      
    
    </summary>
    
      <category term="工具" scheme="http://blog.zhangjian.ml/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="效率" scheme="http://blog.zhangjian.ml/categories/%E5%B7%A5%E5%85%B7/%E6%95%88%E7%8E%87/"/>
    
    
      <category term="复制" scheme="http://blog.zhangjian.ml/tags/%E5%A4%8D%E5%88%B6/"/>
    
      <category term="笔记" scheme="http://blog.zhangjian.ml/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>BandwagonHost-番#羽</title>
    <link href="http://blog.zhangjian.ml/2018/09/08/BandwagonHost-%E7%95%AA-%E7%BE%BD/"/>
    <id>http://blog.zhangjian.ml/2018/09/08/BandwagonHost-番-羽/</id>
    <published>2018-09-08T04:45:40.000Z</published>
    <updated>2018-09-22T19:14:21.434Z</updated>
    
    <content type="html"><![CDATA[<h1 id="国外服务器"><a href="#国外服务器" class="headerlink" title="国外服务器"></a>国外服务器</h1><h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p><a href="https://www.bwh1.net/clientarea.php" target="_blank" rel="noopener">BandwagonHost官网</a></p><img src="/2018/09/08/BandwagonHost-番-羽/注册账号.png" title="注册账号"><h2 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h2><ul><li><p>点击<code>VPS Hosting</code>, 选择<code>$19.99</code> 下面的<code>order kvm</code> ;</p><img src="/2018/09/08/BandwagonHost-番-羽/购买服务器.jpg" title="购买服务器"></li><li><p>然后点击 <code>Add Cart</code>, 也就是 <code>加入购物车</code> 的意思;</p></li><li><p>然后点击<code>Checkout</code>, 也就是<code>结算</code> ;</p></li><li><p>选择 <code>支付宝</code> 支付，完成订单；</p> <img src="/2018/09/08/BandwagonHost-番-羽/支付.png" title="支付"></li></ul><ul><li>接下来的页面，点解<code>pay now</code> ，进行支付宝付款，就购买完成。</li></ul><h2 id="配置服务器"><a href="#配置服务器" class="headerlink" title="配置服务器"></a>配置服务器</h2><ul><li><p>登录网站，<code>client area</code> -&gt; <code>my services</code> -&gt; <code>control panel</code>  ，进入kvm 管理界面 ;</p><img src="/2018/09/08/BandwagonHost-番-羽/配置服务器.png" title="配置服务器"></li><li><p>默认安装的是centos，个人更习惯Ubuntu，先在 <code>main controls</code> 里面<code>stop</code> 掉机器，然后 <code>install new os</code> 可以选择安装Ubuntu系统；</p></li><li><p>然后，会收到邮件，告知，root密码，ssh端口；</p><img src="/2018/09/08/BandwagonHost-番-羽/邮件通知.png" title="邮件通知"></li></ul><h1 id="shadow-socks配置"><a href="#shadow-socks配置" class="headerlink" title="shadow-socks配置"></a>shadow-socks配置</h1><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><ul><li>安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python-pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -p 443 -k password -m rc4-md5</span><br></pre></td></tr></table></figure><p>如果要后台运行：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssserver -p 443 -k password -m rc4-md5 --user nobody -d start</span><br></pre></td></tr></table></figure><p>如果要停止：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssserver -d stop</span><br></pre></td></tr></table></figure><p> 如果要检查日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo less /var/log/shadowsocks.log</span><br></pre></td></tr></table></figure><ul><li>报错</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AttributeError: /usr/local/ssl/lib/libcrypto.so.1.1: undefined symbol: EVP_CIPHER_CTX_cleanup</span><br></pre></td></tr></table></figure><p>vim打开文件openssl.py</p><blockquote><p>路径不同根据报错路径而定</p></blockquote><p> 修改libcrypto.EVP_CIPHER_CTX_cleanup.argtypes</p><p><code>:%s/cleanup/reset/</code></p><p><code>:x</code></p><blockquote><p>以上两条为VIM命令， 替换文中<strong>libcrypto.EVP_CIPHER_CTX_cleanup.argtypes</strong> 为<strong>libcrypto.EVP_CIPHER_CTX_reset.argtypes </strong>共两处，并保存</p></blockquote><p>重新运行</p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>github 上下载window客户端</p><img src="/2018/09/08/BandwagonHost-番-羽/客户端1.png" title="客户端1"><img src="/2018/09/08/BandwagonHost-番-羽/客户端配置.png" title="客户端配置"><p>ubuntu客户端:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:hzwhuang/ss-qt5</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install shadowsocks-qt5</span><br></pre></td></tr></table></figure><p>debiancn源<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo "deb https://repo.debiancn.org/ testing main" | sudo tee /etc/apt/sources.list.d/debiancn.list;</span><br><span class="line">wget https://repo.debiancn.org/pool/main/d/debiancn-keyring/debiancn-keyring_0~20161212_all.deb -O /tmp/debiancn-keyring.deb;</span><br><span class="line">sudo apt install /tmp/debiancn-keyring.deb;</span><br><span class="line">sudo apt update;</span><br><span class="line">rm /tmp/debiancn-keyring.deb;</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/debiancn/repo" target="_blank" rel="noopener">https://github.com/debiancn/repo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;国外服务器&quot;&gt;&lt;a href=&quot;#国外服务器&quot; class=&quot;headerlink&quot; title=&quot;国外服务器&quot;&gt;&lt;/a&gt;国外服务器&lt;/h1&gt;&lt;h2 id=&quot;注册账号&quot;&gt;&lt;a href=&quot;#注册账号&quot; class=&quot;headerlink&quot; title=&quot;注册账号&quot;
      
    
    </summary>
    
      <category term="工具" scheme="http://blog.zhangjian.ml/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="网络" scheme="http://blog.zhangjian.ml/categories/%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="vpn" scheme="http://blog.zhangjian.ml/tags/vpn/"/>
    
  </entry>
  
</feed>
